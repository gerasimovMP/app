plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    xjc
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
    xjc 'org.glassfish.jaxb:jaxb-xjc:4.0.2'
    implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:3.5.2'
    implementation 'org.apache.cxf:cxf-rt-bindings-xml:3.5.2'
    implementation 'org.apache.cxf:cxf-rt-wsdl:3.5.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation 'org.testcontainers:postgresql:1.17.6' // Для интеграционных тестов
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
}

sourceSets {
    main {
        java {
            srcDirs += ["$buildDir/generated-sources/xsd"]
        }
    }
}

task generateXSDClasses(type: JavaExec) {
    group = 'build'
    description = 'Generate Java classes from XSD using XJC'

    def xsdFile = file('src/main/resources/ws/orders.xsd')
    if (!xsdFile.exists()) {
        throw new GradleException("XSD file not found: ${xsdFile}")
    }

    def outputDir = file("$buildDir/generated-sources/xsd")

    inputs.file(xsdFile)
    outputs.dir(outputDir)

    classpath.from(configurations.xjc)
    mainClass = 'com.sun.tools.xjc.XJCFacade'
    args = ['-d', outputDir.absolutePath, '-extension', xsdFile.absolutePath]
}

compileJava.dependsOn generateXSDClasses

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}